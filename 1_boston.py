# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ohI6PEZ6GE9ema5Fk290PErJ8kaKZGiJ
"""

# CRIM: per capita crime rate by town
# ZN: proportion of residential land zoned for lots over 25,000 sq.ft.
# INDUS: proportion of non-retail business acres per town
# CHAS: Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)
# NOX: nitric oxides concentration (parts per 10 million)
# RM: average number of rooms per dwelling
# AGE: proportion of owner-occupied units built prior to 1940
# DIS: weighted distances to five Boston employment centers
# RAD: index of accessibility to radial highways
# TAX: full-value property-tax rate per $10,000
# PTRATIO: pupil-teacher ratio by town
# B: 1000(Bk - 0.63)^2, where Bk is the proportion of Black residents by town
# LSTAT: percentage lower status of the population
# MEDV: median value of owner-occupied homes in $1000s (target variable)

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows',None)
from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error

df=pd.read_excel('Boston_Housing.xlsx')
df1=df.copy()
df1.shape

df1.sample(5)

df1.columns

# Starting with the EDA
df1.info()

df1.describe()

df1.isnull().sum()

df1.duplicated().sum()

#Split the input and the output var
x=df1.drop('MEDV',axis=1)
y=df1['MEDV']

# train test split of the data
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

# Model
lr=LinearRegression()
lr.fit(x_train,y_train)

y_pred=lr.predict(x_test)

r2=r2_score(y_test,y_pred)
mse=mean_squared_error(y_test,y_pred)
mae=mean_absolute_error(y_test,y_pred)
print('r2 score:',r2)
print('mse:',mse)
print('mae:',mae)

# Plot actual prices
plt.scatter(range(len(y_test)), y_test, color='green', label='Actual Prices', alpha=0.6)

# Plot predicted prices
plt.scatter(range(len(y_pred)), y_pred, color='blue', label='Predicted Prices', alpha=0.6)

plt.xlabel('Data Point Index')
plt.ylabel('Price ($1000s)')
plt.title('Actual vs Predicted Prices')
plt.legend()
plt.grid(True)
plt.show()